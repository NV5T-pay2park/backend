@startuml


participant "Merchant (client)" as merchant
participant "Service (Pay2Park)" as service
database "Database (Pay2Park)" as DB

autonumber
activate service

activate merchant
merchant -> service: scan QR (e-ticket) to get information including user_id and lisence_plate_id
service -> service: validate user_id and lisence_plate_id


activate DB
service -> DB: check if e-ticket with status check-in created before

alt e-ticket status is check-in
    DB --> service: return lisence_plate_id and valid permission to update
    service --> merchant: lisence_plate_id
    merchant -> service: payment require
    group ref
      service -> service: call API QR Pay of ZaloPay
    end
    service -> DB: save payment URL to database

    loop status fail (maximum 30s)
      group ref
        service -> service: ping API get order status
      end
      alt status success
        service -> DB: update e-ticket status to check-out
        DB --> service: updated success
      end
    end

    
    service --> merchant: send success/fail message
else e-ticket status error

  alt e-ticket is check-out
      DB --> service: return lisence_plate_id and already check-out message
  else e-ticket has lisence_plate_id != lisence_plate_id stored in database
      DB --> service: return lisence_plate_id and invalid lisence_plate_id message
      deactivate DB
  end
  service --> merchant: send error message
  deactivate merchant
  deactivate service
end

@enduml